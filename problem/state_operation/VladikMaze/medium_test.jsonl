{"question_id": 1, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (2, 3)\n     * Dangerous cells: \n     (2, 2)\n     (2, 4)\n     (3, 1)\n     (3, 2)\n     (3, 3)\n     (4, 1)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((2, 3)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (2, 2)\n     (2, 4)\n     (3, 1)\n     (3, 2)\n     (3, 3)\n     (4, 1)\n- Target is to reach (2, 3)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n....\n.*F*\n***.\n*...\n....\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", ".", ".", "."], [".", "*", "F", "*"], ["*", "*", "*", "."], ["*", ".", ".", "."], [".", ".", ".", "."]]}
{"question_id": 2, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (2, 2)\n     * Dangerous cells: \n     (1, 4)\n     (2, 4)\n     (3, 3)\n     (4, 1)\n     (4, 3)\n     (5, 4)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((2, 2)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (1, 4)\n     (2, 4)\n     (3, 3)\n     (4, 1)\n     (4, 3)\n     (5, 4)\n- Target is to reach (2, 2)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n...*\n.F.*\n..*.\n*.*.\n...*\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", ".", ".", "*"], [".", "F", ".", "*"], [".", ".", "*", "."], ["*", ".", "*", "."], [".", ".", ".", "*"]]}
{"question_id": 3, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (4, 2)\n     * Dangerous cells: \n     (1, 4)\n     (3, 4)\n     (4, 1)\n     (4, 3)\n     (5, 1)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((4, 2)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (1, 4)\n     (3, 4)\n     (4, 1)\n     (4, 3)\n     (5, 1)\n- Target is to reach (4, 2)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n...*\n....\n...*\n*F*.\n*...\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", ".", ".", "*"], [".", ".", ".", "."], [".", ".", ".", "*"], ["*", "F", "*", "."], ["*", ".", ".", "."]]}
{"question_id": 4, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (4, 2)\n     * Dangerous cells: \n     (1, 3)\n     (2, 4)\n     (3, 3)\n     (4, 3)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((4, 2)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (1, 3)\n     (2, 4)\n     (3, 3)\n     (4, 3)\n- Target is to reach (4, 2)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n..*.\n...*\n..*.\n.F*.\n....\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", ".", "*", "."], [".", ".", ".", "*"], [".", ".", "*", "."], [".", "F", "*", "."], [".", ".", ".", "."]]}
{"question_id": 5, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (3, 4)\n     * Dangerous cells: \n     (1, 2)\n     (3, 1)\n     (3, 2)\n     (4, 1)\n     (5, 1)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((3, 4)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (1, 2)\n     (3, 1)\n     (3, 2)\n     (4, 1)\n     (5, 1)\n- Target is to reach (3, 4)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n.*..\n....\n**.F\n*...\n*...\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", "*", ".", "."], [".", ".", ".", "."], ["*", "*", ".", "F"], ["*", ".", ".", "."], ["*", ".", ".", "."]]}
{"question_id": 6, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (1, 2)\n     * Dangerous cells: \n     (2, 2)\n     (4, 1)\n     (4, 3)\n     (5, 2)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((1, 2)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (2, 2)\n     (4, 1)\n     (4, 3)\n     (5, 2)\n- Target is to reach (1, 2)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n.F..\n.*..\n....\n*.*.\n.*..\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", "F", ".", "."], [".", "*", ".", "."], [".", ".", ".", "."], ["*", ".", "*", "."], [".", "*", ".", "."]]}
{"question_id": 7, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (2, 1)\n     * Dangerous cells: \n     (1, 2)\n     (1, 3)\n     (2, 3)\n     (3, 4)\n     (4, 2)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((2, 1)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (1, 2)\n     (1, 3)\n     (2, 3)\n     (3, 4)\n     (4, 2)\n- Target is to reach (2, 1)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n.**.\nF.*.\n...*\n.*..\n....\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", "*", "*", "."], ["F", ".", "*", "."], [".", ".", ".", "*"], [".", "*", ".", "."], [".", ".", ".", "."]]}
{"question_id": 8, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (5, 1)\n     * Dangerous cells: \n     (1, 4)\n     (3, 1)\n     (3, 4)\n     (4, 1)\n     (4, 3)\n     (5, 3)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((5, 1)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (1, 4)\n     (3, 1)\n     (3, 4)\n     (4, 1)\n     (4, 3)\n     (5, 3)\n- Target is to reach (5, 1)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n...*\n....\n*..*\n*.*.\nF.*.\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", ".", ".", "*"], [".", ".", ".", "."], ["*", ".", ".", "*"], ["*", ".", "*", "."], ["F", ".", "*", "."]]}
{"question_id": 9, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (4, 2)\n     * Dangerous cells: \n     (1, 3)\n     (3, 1)\n     (3, 2)\n     (4, 4)\n     (5, 3)\n     (5, 4)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((4, 2)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (1, 3)\n     (3, 1)\n     (3, 2)\n     (4, 4)\n     (5, 3)\n     (5, 4)\n- Target is to reach (4, 2)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n..*.\n....\n**..\n.F.*\n..**\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", ".", "*", "."], [".", ".", ".", "."], ["*", "*", ".", "."], [".", "F", ".", "*"], [".", ".", "*", "*"]]}
{"question_id": 10, "prompt": "Let's play Vladik's Maze Game! Your task is to navigate through a maze with potentially swapped controls to reach the finish point.\n\nRules:\n1. Game Field:\n   - A 5 * 4 grid with three types of cells:\n     * \".\" - normal cell you can visit\n     * \"F\" - finish cell (exactly one)\n     * \"*\" - dangerous cell (avoid these)\n   - Coordinates are 1-based indexing: (row, column)\n   - Current cell positions:\n     * Start: (1, 1) (top-left corner)\n     * Finish: (3, 2)\n     * Dangerous cells: \n     (3, 3)\n     (4, 2)\n     (5, 1)\n     (5, 2)\n     (5, 3)\n\n2. Movement Controls:\n   - Four direction buttons: U(up), D(down), L(left), R(right)\n   - Button Functions may be swapped:\n     * L and R might be swapped with each other\n     * U and D might be swapped with each other\n   - Swaps (if any) are set at game start and remain fixed\n   - Effects of each button when NOT swapped:\n     * U: moves to (current_row - 1, current_col)\n     * D: moves to (current_row + 1, current_col)\n     * L: moves to (current_row, current_col - 1)\n     * R: moves to (current_row, current_col + 1)\n\n3. Movement Rules:\n   - Each move returns your new position (x, y)\n   - If move is invalid (out of grid), position stays same\n   - Grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n   - If you hit dangerous cell, returns (-1, -1) and game ends\n   - When you reach finish cell ((3, 2)), game ends successfully\n\nMove Format:\n1. To make a move:\n   Format: 'My Move: X'\n   where X is one of: U, D, L, R\n   Example: 'My Move: R'\n\n2. System Response:\n   Format: 'x y'\n   where:\n   - (x, y) is your new position\n   - (-1, -1) if you hit dangerous cell\n   Example: After 'My Move: R' at (1, 1), response might be '1 2'\n\nInstructions:\n1. Make moves based on previous responses\n2. Use exactly the format shown above\n3. Explain your reasoning before each move\n\nRemember:\n- Start position is (1, 1)\n- Controls might be swapped\n- Avoid dangerous cells at: (3, 3)\n     (4, 2)\n     (5, 1)\n     (5, 2)\n     (5, 3)\n- Target is to reach (3, 2)\n- Watch for grid boundaries: 1 \u2264 row \u2264 5, 1 \u2264 column \u2264 4\n\nCurrent Grid Layout:\n....\n....\n.F*.\n.*..\n***.\n\nReady to start? Make your first query!", "type": "State Operation", "scale": 5, "difficulty": "medium", "title": "VladikMaze", "grids": [[".", ".", ".", "."], [".", ".", ".", "."], [".", "F", "*", "."], [".", "*", ".", "."], ["*", "*", "*", "."]]}
